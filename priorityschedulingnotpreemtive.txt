#include <stdio.h>

struct Process{
  int pid;
  int arrival_time;
  int burst_time;
  int priority;
  int completion_time;
  int turnaround_time;
  int waiting_time;
  int is_completed;
};

int main(){
  int n, time= 0,completed = 0;
  float avg_tat = 0, avg_wt = 0;

  printf("Enter the number of processes: ");
  scanf("%d",&n);

  struct Process p[n];

  for(int i = 0; i < n; i++){
    p[i].pid = i + 1;
    printf("\n Enter arrival time of process %d: ",i+1);
    scanf("%d",&p[i].arrival_time);
    printf("Enter burst time of process %d: ",i+1);
    scanf("%d",&p[i].burst_time);
    printf("Enter priority of process %d: ",i + 1);
    scanf("%d",&p[i].priority);
    p[i].is_completed = 0;
  }

  while(completed != n){
    int idx = -1;
    int highest_priority = 9999;

    for(int i = 0; i < n; i++){
      if(p[i].arrival_time <= time && p[i].is_completed == 0){
        if(p[i].priority < highest_priority){
          highest_priority = p[i].priority;
          idx = i;
        }else if(p[i].priority == highest_priority && p[i].arrival_time< p[idx].arrival_time){
          idx = i;
        }
      }
    }
    if(idx != -1){
      p[idx].completion_time = time + p[idx].burst_time;
      p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
      p[idx].waiting_time = p[idx].turnaround_time - p[idx].burst_time;

      time = p[idx].completion_time;
      p[idx].is_completed = 1;
      completed++;

      avg_tat += p[idx].turnaround_time;
      avg_wt += p[idx].waiting_time;
    }else{
      time++;
    }
  }
  printf("\nPID\tAT\tBT\tPriority]\tCT\tTAT\tWT\n");
  for(int i = 0;i < n; i++){
    printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n",p[i].pid, p[i].arrival_time,p[i].burst_time,p[i].priority,p[i].completion_time,p[i].turnaround_time,p[i].waiting_time);
  }
  printf("\nAverage Turnaround Time = %.2f", avg_tat / n);
  printf("\nAverage Waiting Time = %.2f\n, avg_wt / n");
  return 0;  
}