#include <stdio.h>

struct process {
    int pid, at, bt, ct, tat, wt, st;
};

int partition(struct process arr[], int low, int high) {
    int pivot = arr[low].at;
    int i = low;

    for (int j = low + 1; j <= high; j++) {
        if (arr[j].at < pivot || (arr[j].at == pivot && arr[j].pid < arr[low].pid)) {
            i++;
            struct process temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    struct process temp = arr[i];
    arr[i] = arr[low];
    arr[low] = temp;

    return i;
}

void quickSort(struct process arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void calculate_ct_tat_wt(int n, struct process arr[]) {
    arr[0].st = (arr[0].at > 0) ? arr[0].at : 0;
    arr[0].ct = arr[0].st + arr[0].bt;
    arr[0].tat = arr[0].ct - arr[0].at;
    arr[0].wt = arr[0].tat - arr[0].bt;

    for (int i = 1; i < n; i++) {
        arr[i].st = (arr[i - 1].ct >= arr[i].at) ? arr[i - 1].ct : arr[i].at;
        arr[i].ct = arr[i].st + arr[i].bt;
        arr[i].tat = arr[i].ct - arr[i].at;
        arr[i].wt = arr[i].tat - arr[i].bt;
    }
}

void print_gantt_chart(int n, struct process arr[]) {
    printf("\nGantt Chart:\n ");

    for (int i = 0; i < n; i++) {
        printf("--------");
    }
    printf("\n|");

    for (int i = 0; i < n; i++) {
        printf("  P%-2d  |", arr[i].pid);
    }

    printf("\n ");
    for (int i = 0; i < n; i++) {
        printf("--------");
    }

    printf("\n0");  
    for (int i = 0; i < n; i++) {
        printf("       %d", arr[i].ct);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time of process %d: ", processes[i].pid);
        scanf("%d", &processes[i].at);
        printf("Enter burst time of process %d: ", processes[i].pid);
        scanf("%d", &processes[i].bt);
    }
    quickSort(processes, 0, n - 1);
    calculate_ct_tat_wt(n, processes);
    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].pid, processes[i].at, processes[i].bt, 
               processes[i].ct, processes[i].tat, processes[i].wt);
    }
    print_gantt_chart(n, processes);
    int schedule_length = processes[n - 1].ct - processes[0].ct;
    float throughput = (float)n / schedule_length;
    printf("\nSchedule Length: %d", schedule_length);
    printf("\nThroughput: %.2f processes/unit time\n", throughput);
    return 0;
}